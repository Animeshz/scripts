#!/usr/bin/env bash

# Styles the text to different styles (like superscript), run with --help to know more

declare -A unicodes=(
  # fixup indexing, few symbols missing...
  ['superscript']="!\"#$%&'⁽⁾*⁺,⁻./⁰¹²³⁴⁵⁶⁷⁸⁹:;<⁼>?@ᴬᴮᶜᴰᴱᶠᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾᵠᴿˢᵀᵁⱽᵂˣʸᶻ[\\]^_\`ᵃᵇᶜᵈᵉᶠᵍʰⁱʲᵏˡᵐⁿᵒᵖᵠʳˢᵗᵘᵛʷˣʸᶻ{|}~"
  ['circled']="!\"#$%&'()*+,-./⓪①②③④⑤⑥⑦⑧⑨:;<=>?@ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏ[\\]^_\`ⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ{|}~",
  ['circled-neg']="!\"#$%&'()*+,-./⓿❶❷❸❹❺❻❼❽❾:;<=>?@🅐🅑🅒🅓🅔🅕🅖🅗🅘🅙🅚🅛🅜🅝🅞🅟🅠🅡🅢🅣🅤🅥🅦🅧🅨🅩[\\]^_\`🅐🅑🅒🅓🅔🅕🅖🅗🅘🅙🅚🅛🅜🅝🅞🅟🅠🅡🅢🅣🅤🅥🅦🅧🅨🅩{|}~",
  ['fullwidth']="！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝～",
  ['math-bold']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙[\\]^_\`𝐚𝐛𝐜𝐝𝐞𝐟𝐠𝐡𝐢𝐣𝐤𝐥𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐭𝐮𝐯𝐰𝐱𝐲𝐳{|}~",
  ['math-bold-fraktur']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@𝕬𝕭𝕮𝕯𝕰𝕱𝕲𝕳𝕴𝕵𝕶𝕷𝕸𝕹𝕺𝕻𝕼𝕽𝕾𝕿𝖀𝖁𝖂𝖃𝖄𝖅[\\]^_\`𝖆𝖇𝖈𝖉𝖊𝖋𝖌𝖍𝖎𝖏𝖐𝖑𝖒𝖓𝖔𝖕𝖖𝖗𝖘𝖙𝖚𝖛𝖜𝖝𝖞𝖟{|}~",
  ['math-bold-italic']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@𝑨𝑩𝑪𝑫𝑬𝑭𝑮𝑯𝑰𝑱𝑲𝑳𝑴𝑵𝑶𝑷𝑸𝑹𝑺𝑻𝑼𝑽𝑾𝑿𝒀𝒁[\\]^_\`𝒂𝒃𝒄𝒅𝒆𝒇𝒈𝒉𝒊𝒋𝒌𝒍𝒎𝒏𝒐𝒑𝒒𝒓𝒔𝒕𝒖𝒗𝒘𝒙𝒚𝒛{|}~",
  ['math-bold-script']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@𝓐𝓑𝓒𝓓𝓔𝓕𝓖𝓗𝓘𝓙𝓚𝓛𝓜𝓝𝓞𝓟𝓠𝓡𝓢𝓣𝓤𝓥𝓦𝓧𝓨𝓩[\\]^_\`𝓪𝓫𝓬𝓭𝓮𝓯𝓰𝓱𝓲𝓳𝓴𝓵𝓶𝓷𝓸𝓹𝓺𝓻𝓼𝓽𝓾𝓿𝔀𝔁𝔂𝔃{|}~",
  ['math-double-struck']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@𝔸𝔹ℂ𝔻𝔼𝔽𝔾ℍ𝕀𝕁𝕂𝕃𝕄ℕ𝕆ℙℚℝ𝕊𝕋𝕌𝕍𝕎𝕏𝕐ℤ[\\]^_\`𝕒𝕓𝕔𝕕𝕖𝕗𝕘𝕙𝕚𝕛𝕜𝕝𝕞𝕟𝕠𝕡𝕢𝕣𝕤𝕥𝕦𝕧𝕨𝕩𝕪𝕫{|}~",
  ['math-monospace']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@𝙰𝙱𝙲𝙳𝙴𝙵𝙶𝙷𝙸𝙹𝙺𝙻𝙼𝙽𝙾𝙿𝚀𝚁𝚂𝚃𝚄𝚅𝚆𝚇𝚈𝚉[\\]^_\`𝚊𝚋𝚌𝚍𝚎𝚏𝚐𝚑𝚒𝚓𝚔𝚕𝚖𝚗𝚘𝚙𝚚𝚛𝚜𝚝𝚞𝚟𝚠𝚡𝚢𝚣{|}~",
  ['math-sans']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@𝖠𝖡𝖢𝖣𝖤𝖥𝖦𝖧𝖨𝖩𝖪𝖫𝖬𝖭𝖮𝖯𝖰𝖱𝖲𝖳𝖴𝖵𝖶𝖷𝖸𝖹[\\]^_\`𝖺𝖻𝖼𝖽𝖾𝖿𝗀𝗁𝗂𝗃𝗄𝗅𝗆𝗇𝗈𝗉𝗊𝗋𝗌𝗍𝗎𝗏𝗐𝗑𝗒𝗓{|}~",
  ['math-sans-bold']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@𝗔𝗕𝗖𝗗𝗘𝗙𝗚𝗛𝗜𝗝𝗞𝗟𝗠𝗡𝗢𝗣𝗤𝗥𝗦𝗧𝗨𝗩𝗪𝗫𝗬𝗭[\\]^_\`𝗮𝗯𝗰𝗱𝗲𝗳𝗴𝗵𝗶𝗷𝗸𝗹𝗺𝗻𝗼𝗽𝗾𝗿𝘀𝘁𝘂𝘃𝘄𝘅𝘆𝘇{|}~",
  ['math-sans-bold-italic']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@𝘼𝘽𝘾𝘿𝙀𝙁𝙂𝙃𝙄𝙅𝙆𝙇𝙈𝙉𝙊𝙋𝙌𝙍𝙎𝙏𝙐𝙑𝙒𝙓𝙔𝙕[\\]^_\`𝙖𝙗𝙘𝙙𝙚𝙛𝙜𝙝𝙞𝙟𝙠𝙡𝙢𝙣𝙤𝙥𝙦𝙧𝙨𝙩𝙪𝙫𝙬𝙭𝙮𝙯{|}~",
  ['math-sans-italic']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@𝘈𝘉𝘊𝘋𝘌𝘍𝘎𝘏𝘐𝘑𝘒𝘓𝘔𝘕𝘖𝘗𝘘𝘙𝘚𝘛𝘜𝘝𝘞𝘟𝘠𝘡[\\]^_\`𝘢𝘣𝘤𝘥𝘦𝘧𝘨𝘩𝘪𝘫𝘬𝘭𝘮𝘯𝘰𝘱𝘲𝘳𝘴𝘵𝘶𝘷𝘸𝘹𝘺𝘻{|}~",
  ['parenthesized']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵[\\]^_\`⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵{|}~",
  ['squared']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@🄰🄱🄲🄳🄴🄵🄶🄷🄸🄹🄺🄻🄼🄽🄾🄿🅀🅁🅂🅃🅄🅅🅆🅇🅈🅉[\\]^_\`🄰🄱🄲🄳🄴🄵🄶🄷🄸🄹🄺🄻🄼🄽🄾🄿🅀🅁🅂🅃🅄🅅🅆🅇🅈🅉{|}~",
  ['squared-neg']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@🅰🅱🅲🅳🅴🅵🅶🅷🅸🅹🅺🅻🅼🅽🅾🅿🆀🆁🆂🆃🆄🆅🆆🆇🆈🆉[\\]^_\`🅰🅱🅲🅳🅴🅵🅶🅷🅸🅹🅺🅻🅼🅽🅾🅿🆀🆁🆂🆃🆄🆅🆆🆇🆈🆉{|}~",
  ['a-cute-pseudoalphabet']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@ÁBĆDÉFǴHíJḰĹḾŃŐṔQŔśTŰVẂXӲŹ[\\]^_\`ábćdéfǵhíjḱĺḿńőṕqŕśtúvẃxӳź{|}~",
  ['cjk+thai-pseudoalphabet']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@ﾑ乃cd乇ｷgんﾉﾌズﾚﾶ刀oｱq尺丂ｲu√wﾒﾘ乙[\\]^_\`ﾑ乃cd乇ｷgんﾉﾌズﾚﾶ刀oｱq尺丂ｲu√wﾒﾘ乙{|}~",
  ['curvy-1-pseudoalphabet']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@ค๒ƈɗﻉ'िﻭɦٱﻝᛕɭ๓กѻρ۹ɼรՇપ۷ฝซץչ[\\]^_\`ค๒ƈɗﻉ'िﻭɦٱﻝᛕɭ๓กѻρ۹ɼรՇપ۷ฝซץչ{|}~",
  ['curvy-2-pseudoalphabet']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@αв¢∂єƒﻭнιנкℓмησρ۹яѕтυνωχуչ[\\]^_\`αв¢∂єƒﻭнιנкℓмησρ۹яѕтυνωχуչ{|}~",
  ['curvy-3-pseudoalphabet']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@ค๒ς๔єŦﻮђเןкɭ๓ภ๏קợгรՇยשฬאץչ[\\]^_\`ค๒ς๔єŦﻮђเןкɭ๓ภ๏קợгรՇยשฬאץչ{|}~",
  ['faux-cyrillic-pseudoalphabet']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@ДБҀↁЄFБНІЈЌLМИФРQЯЅГЦVЩЖЧZ[\\]^_\`аъсↁэfБЂіјкlмиорqѓѕтцvшхЎz{|}~",
  ['faux-ethiopic-pseudoalphabet']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@ልጌርዕቿቻኗዘጎጋጕረጠክዐየዒዪነፕሁሀሠሸሃጊ[\\]^_\`ልጌርዕቿቻኗዘጎጋጕረጠክዐየዒዪነፕሁሀሠሸሃጊ{|}~",
  ['math-fraktur-pseudoalphabet']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@𝔄𝔅ℭ𝔇𝔈𝔉𝔊ℌℑ𝔍𝔎𝔏𝔐𝔑𝔒𝔓𝔔ℜ𝔖𝔗𝔘𝔙𝔚𝔛𝔜ℨ[\\]^_\`𝔞𝔟𝔠𝔡𝔢𝔣𝔤𝔥𝔦𝔧𝔨𝔩𝔪𝔫𝔬𝔭𝔮𝔯𝔰𝔱𝔲𝔳𝔴𝔵𝔶𝔷{|}~",
  ['rock-dots-pseudoalphabet']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@ÄḄĊḊЁḞĠḦЇJḲḶṀṄÖṖQṚṠṪÜṾẄẌŸŻ[\\]^_\`äḅċḋëḟġḧïjḳḷṁṅöṗqṛṡẗüṿẅẍÿż{|}~",
  ['small-caps-pseudoalphabet']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@ᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴩQʀꜱᴛᴜᴠᴡxYᴢ[\\]^_\`ᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴩqʀꜱᴛᴜᴠᴡxyᴢ{|}~",
  ['stroked_pseudoalphabet']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@ȺɃȻĐɆFǤĦƗɈꝀŁMNØⱣꝖɌSŦᵾVWXɎƵ[\\]^_\`Ⱥƀȼđɇfǥħɨɉꝁłmnøᵽꝗɍsŧᵾvwxɏƶ{|}~",
  ['inverted_pseudoalphabet']="!\"#$%&'()*+,-./⁰¹²³⁴⁵⁶⁷⁸⁹:;<=>?@ɐqɔpǝɟƃɥıɾʞןɯuodbɹsʇn𐌡ʍxʎ[\\]^_\`ɐqɔpǝɟƃɥıɾʞןɯuodbɹsʇnʌʍxʎz{|}~"
)

help() {
  self_name="$(basename "$0")"
  echo "$self_name -- Styles the given text into unicode format"
  echo "usage:"
  echo "  $self_name FORMAT INPUT_TEXT"
  echo "  echo 'something' | $self_name FORMAT"
  echo
  echo "Available formats:"

  for unicode in "${!unicodes[@]}"; do
    echo "  $unicode - ${unicodes[$unicode]}"
  done
}

if [[ "$#" != 2 ]]; then
  if [[ ! -t 0 && "$#" == 1 ]]; then :;
  elif [[ "$#" == 0 ]]; then help; exit 0;
  else >&2 echo "Must provide 2 arguments (not $#) (one can be from stdin), see '$(basename "$0") --help' for more info."; exit 1;
  fi
fi

# Faster lookup with hashmap compared to on-time printf calls (printf "%d" "'$character")
declare -A ord
for (( i=32; i<127; i++ )); do ord["$(printf '%b' $(printf '\\x%x' $i))"]="$i"; done

unicode=${unicodes[$1]}
if [[ -z $unicode ]]; then
  echo "$2"
  exit 0
fi

# Read from $2 if present or else from pipe of another command (prechecked before) without bufferring,
# so non-ending input sequence will work
{ [[ -n "$2" ]] && echo "$2" || cat -; } | \
  while read line; do
    for (( i=0; i<${#line}; i++ )); do
      char="${line:$i:1}"
      charcode=${ord["$char"]}

      # Faster to just echo than to store it in result variable and concat at each step
      if (( charcode > 32 && charcode < 127 )); then
        echo -n "${unicode:$((charcode-33)):1}"
      else
        echo -n "$char"
      fi
    done
    printf '\n'
  done

